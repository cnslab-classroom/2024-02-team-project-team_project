/*
 * This source file was generated by the Gradle 'init' task
 */
/*
 * This source file was generated by the Gradle 'init' task
 */
package team.project;

import team.project.datacollection.Crawler;

import java.util.ArrayList;
import java.util.List;

public class App {

    // Inner class representing a single crawler task
    static class CrawlerTask implements Runnable {
        private final String threadName;
        private final Crawler crawlerInstance;

        public CrawlerTask(String threadName) {
            this.threadName = threadName;
            this.crawlerInstance = new Crawler();
        }

        @Override
        public void run() {
            System.out.println("[" + threadName + "] Starting crawl...");
            try {
                crawlerInstance.crawl(); // Perform crawling
                System.out.println("[" + threadName + "] Crawl completed.");
            } catch (Exception e) {
                System.err.println("[" + threadName + "] Error: " + e.getMessage());
            }
        }

        // Retrieve the articles as a list of strings
        public List<String> getArticles() {
            return crawlerInstance.getArticlesString();
        }
    }

    public static void main(String[] args) {
        System.out.println("=== Application Start ===");

        final int numberOfThreads = 3; // Number of threads to use
        List<Thread> threads = new ArrayList<>();
        List<CrawlerTask> tasks = new ArrayList<>();

        // Create and start threads
        for (int i = 0; i < numberOfThreads; i++) {
            String threadName = "CrawlerThread-" + (i + 1);
            CrawlerTask task = new CrawlerTask(threadName);
            Thread thread = new Thread(task);

            threads.add(thread);
            tasks.add(task);

            thread.start();
        }

        // Wait for all threads to finish
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                System.err.println("Error while waiting for threads: " + e.getMessage());
            }
        }

        // Aggregate results from all tasks
        System.out.println("=== Aggregating Results ===");
        List<String> allArticles = new ArrayList<>();
        for (CrawlerTask task : tasks) {
            allArticles.addAll(task.getArticles());
        }

        // Print the results
        System.out.println("=== Articles Collected ===");
        for (String article : allArticles) {
            System.out.println(article);
        }

        System.out.println("=== Application End ===");
    }
}
